// ------------------------------
// Datasource & Generator
// ------------------------------
// - datasource: which DB and how to connect.
// - generator: produces a TypeScript client you can import (type-safe!).

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------------------
// Domain models (Extended: ML, SPREAD, TOTAL)
// ------------------------------
// Supports 2-way moneyline, spreads, and totals:
// Event -> Market(type=MarketType) -> Odds (per sportsbook, per outcome)

enum MarketType {
  ML
  SPREAD
  TOTAL
}

enum Outcome {
  A
  B
  OVER
  UNDER
}

model Sportsbook {
  id        String   @id @default(cuid())     // cuid = unique string id
  name      String   @unique                  // one row per book name
  url       String?                           // optional info
  odds      Odds[]                            // backref to odds
  createdAt DateTime @default(now())
}

model Event {
  id        String   @id @default(cuid())
  sport     String                             // "NBA", "NFL", etc.
  league    String?                            // ex: "NBA", "EPL"
  startsAt  DateTime                           // tipoff
  teamA     String
  teamB     String
  markets   Market[]                           // event can have multiple markets
  createdAt DateTime @default(now())

  @@index([startsAt])
}

model Market {
  id        String     @id @default(cuid())
  eventId   String
  type      MarketType // ML, SPREAD, TOTAL
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  odds      Odds[]     

  @@index([type])
  @@index([type, eventId])
}

model Odds {
  id           String     @id @default(cuid())
  marketId     String
  sportsbookId String
  outcome      Outcome                              // "A", "B", "OVER", "UNDER"
  decimal      Float                                 // decimal odds (e.g. 2.10)
  line         Float?                                // spread/total line (null for ML)
  lastSeenAt   DateTime   @default(now())

  market       Market     @relation(fields: [marketId], references: [id], onDelete: Cascade)
  sportsbook   Sportsbook @relation(fields: [sportsbookId], references: [id], onDelete: Cascade)

  // Data quality: prevent duplicate rows for same market/book/outcome/line.
  // For ML/H2H, line is always null, so use a separate unique constraint.
  @@unique([marketId, sportsbookId, outcome])
  @@unique([marketId, sportsbookId, outcome, line])
  @@index([marketId, sportsbookId])
  @@index([outcome, line])
  @@index([marketId, sportsbookId, outcome, line])
}

model OddsFingerprint {
  key       String   @id   // stable event key (see fingerprintKey)
  hash      String
  updatedAt DateTime @updatedAt
}
